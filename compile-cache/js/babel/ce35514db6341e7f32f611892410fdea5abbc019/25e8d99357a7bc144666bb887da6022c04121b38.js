Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = checkConfigAndMigrate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _electron = require('electron');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _werkzeug = require('./werkzeug');

function checkConfigAndMigrate() {
  // TODO: remove after grace period
  checkCleanExtensions();
  checkOpenerSetting();
  checkMasterFileSearchSetting();
  checkBuilder();
}

function checkBuilder() {
  var builder = atom.config.get('latex.builder');
  if (!builder) return;

  atom.config.unset('latex.builder');
  if (builder !== 'texify') return;

  // --------------------------------------------------
  // TODO: Remove this whole block after a grace period
  // --------------------------------------------------
  var message = 'LaTeX: The texify builder has been deprecated';
  var description = (0, _werkzeug.heredoc)('\n    Support for the `texify` builder has been deprecated in favor of `latexmk`,\n    and has been removed.');

  var title = 'How to use latexmk with MiKTeX';
  var url = 'https://github.com/thomasjo/atom-latex/wiki/Using-latexmk-with-MiKTeX';
  var openUrl = function openUrl(event) {
    // NOTE: Horrible hack due to a bug in atom/notifications module...
    var element = event.target.parentElement.parentElement.parentElement.parentElement;
    var notification = element.getModel();
    notification.dismiss();

    _electron.shell.openExternal(url);
  };

  atom.notifications.addWarning(message, {
    dismissable: true, description: description, buttons: [{ text: title, onDidClick: openUrl }]
  });
}

function checkMasterFileSearchSetting() {
  if (!atom.config.get('latex.useMasterFileSearch')) return;

  atom.config.unset('latex.useMasterFileSearch');

  var message = 'LaTeX: The Master File Search setting has been deprecated';
  var description = (0, _werkzeug.heredoc)('\n    Support for the Master File Search setting has been deprecated in favor of\n    `%!TEX root` magic comments, and has been removed.');
  atom.notifications.addInfo(message, { description: description });
}

function checkCleanExtensions() {
  var cleanExtensions = atom.config.get('latex.cleanExtensions');
  if (!cleanExtensions) return;

  var cleanPatterns = atom.config.get('latex.cleanPatterns');
  var defaultExtensions = ['.aux', '.bbl', '.blg', '.fdb_latexmk', '.fls', '.lof', '.log', '.lol', '.lot', '.nav', '.out', '.pdf', '.snm', '.synctex.gz', '.toc'];

  atom.config.unset('latex.cleanExtensions');

  var removedExtensions = _lodash2['default'].difference(defaultExtensions, cleanExtensions);
  cleanPatterns = _lodash2['default'].difference(cleanPatterns, removedExtensions.map(function (extension) {
    return '**/*' + extension;
  }));

  var addedExtensions = _lodash2['default'].difference(cleanExtensions, defaultExtensions);
  cleanPatterns = _lodash2['default'].union(cleanPatterns, addedExtensions.map(function (extension) {
    return '**/*' + extension;
  }));

  atom.config.set('latex.cleanPatterns', cleanPatterns);
  var message = 'LaTeX: The "latex:clean" command has changed';
  var description = (0, _werkzeug.heredoc)('\n    Your custom extensions in the `Clean Extensions` settings have\n    been migrated to the new setting `Clean Patterns`.');
  atom.notifications.addInfo(message, { description: description });
}

function checkOpenerSetting() {
  var alwaysOpenResultInAtom = atom.config.get('latex.alwaysOpenResultInAtom');
  if (!alwaysOpenResultInAtom) return;

  atom.config.unset('latex.alwaysOpenResultInAtom');
  atom.config.set('latex.opener', 'pdf-view');
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,