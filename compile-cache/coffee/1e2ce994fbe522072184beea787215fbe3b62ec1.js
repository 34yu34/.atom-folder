(function() {
  var CompositeDisposable;

  CompositeDisposable = require('atom').CompositeDisposable;

  module.exports = {
    activate: function(state) {
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'header-implementation:generate': (function(_this) {
          return function() {
            return _this.generate();
          };
        })(this)
      }));
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'header-implementation:add': (function(_this) {
          return function() {
            return _this.add();
          };
        })(this)
      }));
      this.FILE_NAMESPACE_END_PATTERN = /}\s+}/;
      this.FILE_NAME_PATTERN = /([\w]+)\.([h|cpp]+)/;
      this.CLASS_NAME_PATTERN = /(namespace|class)\s+(\w+)\s*{/g;
      return this.METHOD_PATTERN = /^\s*((?:(?:\s*const\s*)|(?:\s*static\s*)|(?:\s*virtual\s*)|(?:\s*volatile\s*)|(?:\s*friend\s*)){0,5}\s*\w+(?::{2}\w+)*(?:\s*?[&*]\s*?)*)??\s*([\w~]+)\s*(\(.*\))\s*?(\sconst)?\s*;/gm;
    },
    findPath: function(work) {
      work.headerPath = "";
      work.implementationPath = "";
      return atom.workspace.scan(this.FILE_NAME_PATTERN, function(file) {
        if (file.filePath.includes(work.classname + ".h")) {
          work.headerPath = file.filePath;
        }
        if (file.filePath.includes(work.classname + ".cpp")) {
          return work.implementationPath = file.filePath;
        }
      });
    },
    findClassName: function(work) {
      work.buffer.scan(this.CLASS_NAME_PATTERN, function(res) {
        work.namespace = res.match[1] === "namespace";
        return work.classname = res.match[2];
      });
      return work.editor.moveToEndOfLine();
    },
    findAllMethods: function(work) {
      var ctx;
      ctx = this;
      return work.buffer.scan(this.METHOD_PATTERN, function(res) {
        return ctx.addMethod(work, res);
      });
    },
    findMethodInRange: function(work, range) {
      var ctx;
      ctx = this;
      return work.editor.scanInBufferRange(this.METHOD_PATTERN, range, function(res) {
        return ctx.addMethod(work, res);
      });
    },
    addMethod: function(work, res) {
      var method;
      method = [];
      method.push((res.match[1] || "").replace("static ", "").replace(/\s{2,}/, " ") || "");
      method.push(res.match[2] + res.match[3] + (res.match[4] || ""));
      return work.methods.push(method);
    },
    readFile: function(work) {
      this.findClassName(work);
      return this.findAllMethods(work);
    },
    createFile: function(work) {
      return atom.workspace.open(work.implementationPath);
    },
    createHeadOfCpp: function(work) {
      work.editor.insertText("#include \"" + work.classname + ".h\"");
      work.editor.insertNewline();
      work.editor.insertNewline();
      work.editor.insertNewline();
      if (work.namespace) {
        work.editor.insertText("namespace " + work.classname);
        work.editor.insertNewline();
        work.editor.insertText("{");
        return work.editor.insertNewline();
      }
    },
    methodComment: function(work) {
      work.editor.insertText("/*" + "*".repeat(68));
      work.editor.insertNewline();
      work.editor.insertText("* Comment");
      work.editor.insertNewline();
      work.editor.insertText("*".repeat(68) + "*/");
      return work.editor.insertNewline();
    },
    methodName: function(work, method) {
      if (method[0]) {
        work.editor.insertText(method[0] + " ");
      }
      if (work.namespace) {
        work.editor.insertText("" + method[1]);
      } else {
        work.editor.insertText(work.classname + "::" + method[1]);
      }
      return work.editor.insertNewline();
    },
    methodBody: function(work) {
      work.editor.insertText("{");
      work.editor.insertNewline();
      work.editor.moveDown(1);
      return work.editor.insertNewline();
    },
    writeMethod: function(work, method) {
      this.methodComment(work);
      this.methodName(work, method);
      return this.methodBody(work);
    },
    writeAllMethods: function(work) {
      var ctx;
      ctx = this;
      return work.methods.forEach(function(method) {
        return ctx.writeMethod(work, method, ctx);
      });
    },
    writeNewCpp: function(work) {
      this.createHeadOfCpp(work);
      return this.writeAllMethods(work);
    },
    moveCursorToAppend: function(work) {
      if (work.namespace) {
        work.buffer.backwardsScan(this.FILE_NAMESPACE_END_PATTERN, function(res) {
          var point;
          point = res.range[0];
          return res.stop();
        });
        work.editor.setCursorBufferPosition(point);
        work.editor.moveRight(1);
        return work.editor.insertNewline();
      } else {
        return work.editor.moveToBottom();
      }
    },
    generateWork: function() {
      var buffer, editor, work;
      editor = atom.workspace.getActiveTextEditor();
      buffer = editor.getBuffer();
      work = {
        editor: editor,
        buffer: buffer,
        headerPath: "",
        implementationPath: "",
        classname: "",
        namespace: false,
        methods: []
      };
      return work;
    },
    changeEditor: function(work, editor) {
      work.editor = editor;
      return work.buffer = work.editor.getBuffer();
    },
    lineRange: function(work) {
      work.editor.moveToBeginningOfLine();
      work.editor.selectToEndOfLine();
      return work.editor.getSelectedBufferRange();
    },
    generate: function() {
      var ctx, work;
      work = this.generateWork();
      work.editor.save();
      this.readFile(work);
      work.headerPath = work.editor.getPath();
      work.implementationPath = work.headerPath.replace(".h", ".cpp");
      ctx = this;
      this.createFile(work).then(function(editor) {
        ctx.changeEditor(work, editor);
        return ctx.writeNewCpp(work);
      });
    },
    add: function() {
      var ctx, work;
      work = this.generateWork();
      work.editor.save;
      this.findClassName(work);
      ctx = this;
      this.findPath(work).then(function() {
        var range;
        range = ctx.lineRange(work);
        this.findMethodInRange(work, range);
        if (!work.methods.length) {
          return;
        }
        return ctx.createFile(work).then(function(editor) {
          ctx.changeEditor(work, editor);
          ctx.moveCursorToAppend(work);
          return ctx.writeMethod(work, work.methods[0]);
        });
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
